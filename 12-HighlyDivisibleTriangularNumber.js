/*
Problem 12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?
*/

function divisibleTriangleNumber(n) {
  let curTriNum = 1;
  for (let i = 1; ; i++) {
    if (getNumDivisors(curTriNum) >= n) return curTriNum;
    curTriNum += i;
  }
}

// This is a brute force algorithm for calculating the number of divisors. O(n), inefficient, especially when run across many triangular numbers
function getNumDivisorsBruteForce(n) {
  if (n === 1) return 1;

  let numDivisors = 0;
  // Don't need to check for divisors above half of n (with the exception of n itself, which we add at the end)
  for (let i = 1; i <= n / 2; i++) {
    if (n % i === 0) numDivisors++;
  }
  return ++numDivisors;
}

// Much more efficient way of calulating the number of divisors using prime factorization. See https://en.wikipedia.org/wiki/Divisor_function
function getNumDivisors(n) {
  if (n === 1) return 1;

  let curFactor = 2;
  let numDivisors = 1; // n is always divisible by itself
  let factorizedN = n; // Running factorization of n

  // Dividing out factors for n as we go means we don't have to check if curFactor is prime
  while (curFactor * curFactor <= factorizedN) {
    if (factorizedN % curFactor === 0) {
      let exp = 1;
      // If current factor is a prime, check how many times it divides into n and add that to total
      do {
       factorizedN /= curFactor;
       exp++;
      } while (factorizedN % curFactor === 0)
      numDivisors += exp;
    }
    curFactor = (curFactor === 2) ? 3: curFactor + 2; // Only odd numbers can be prime with exception of 2
  }

  // If n was a prime number to begin with, then no factors would have been found by above loop. So return 2
  //if (factorizedN > 1) return 2;
  return numDivisors;
}

console.log(getNumDivisors(28));
//console.log(divisibleTriangleNumber(500));